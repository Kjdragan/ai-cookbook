"""
Example demonstrating advanced LlamaIndex search features.

This script shows how to use the advanced search components including:
- Ensemble retrieval
- Diversity reranking
- Citation tracking
- Contextual response formatting
- Query routing
"""

import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

# Add the project root to the path so we can import search_module
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from llama_index.core.retrievers import BaseRetriever
from llama_index.core import VectorStoreIndex, SimpleKeywordTableIndex
from llama_index.core.schema import Document, QueryBundle
from llama_index.core.node_parser import SimpleNodeParser
from llama_index.vector_stores.lancedb import LanceDBVectorStore
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.llms.openai import OpenAI
from llama_index.core.response_synthesizers import CompactAndRefine
from llama_index.core.settings import Settings

from search_module.providers.llamaindex.retrievers import (
    EnsembleRetriever, 
    DiversityReranker,
    DiversityRerankConfig,
    QueryRouter,
    QueryRouterConfig
)
from search_module.providers.llamaindex.citation import (
    CitationTracker,
    CitationConfig,
    CitationStyle,
    CitationResponseSynthesizer
)
from search_module.providers.llamaindex.response import (
    ContextualFormatter,
    FormatterConfig,
    ResponseFormat,
    VerbosityLevel
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()


def load_sample_documents():
    """Load sample documents for demonstration."""
    docs = [
        Document(
            text="Climate change is primarily caused by greenhouse gas emissions. "
                 "The main greenhouse gases are carbon dioxide, methane, and nitrous oxide.",
            metadata={
                "title": "Climate Change Basics",
                "author": "Environmental Protection Agency",
                "date": "2023",
                "source": "EPA Climate Report"
            }
        ),
        Document(
            text="Economic policies that address climate change include carbon taxes, "
                 "cap-and-trade systems, subsidies for renewable energy, and regulations "
                 "on emissions. Each approach has different impacts on industries.",
            metadata={
                "title": "Economics of Climate Policy",
                "author": "J. Smith",
                "date": "2022",
                "source": "Journal of Environmental Economics"
            }
        ),
        Document(
            text="Solar energy is generated by converting sunlight into electricity. "
                 "This can be done through photovoltaic panels or concentrated solar power. "
                 "The efficiency of solar panels has improved significantly in recent years.",
            metadata={
                "title": "Solar Energy Technologies",
                "author": "National Renewable Energy Laboratory",
                "date": "2024",
                "source": "NREL Technical Report"
            }
        ),
        Document(
            text="Wind turbines convert the kinetic energy of wind into mechanical power. "
                 "This mechanical power can be used for specific tasks or converted into "
                 "electricity. Modern wind turbines can generate significant amounts of power.",
            metadata={
                "title": "Wind Energy Basics",
                "author": "Department of Energy",
                "date": "2023",
                "source": "Renewable Energy Guide"
            }
        ),
        Document(
            text="The Paris Agreement is an international treaty on climate change. "
                 "It was adopted in 2015 and aims to limit global warming to well below "
                 "2 degrees Celsius compared to pre-industrial levels.",
            metadata={
                "title": "Paris Climate Agreement",
                "author": "United Nations",
                "date": "2015",
                "source": "UN Climate Change Conference"
            }
        ),
    ]
    return docs


def setup_advanced_search_pipeline():
    """Set up the advanced search pipeline with all components."""
    
    # Create vector store and index 
    sample_docs = load_sample_documents()
    
    # Set up embedding model
    embed_model = OpenAIEmbedding(
        model_name="text-embedding-3-large",
        dimensions=3072
    )
    
    # Configure global settings
    Settings.embed_model = embed_model
    
    # Create retrievers
    # For a real application, this would use a persistent index
    vector_index = VectorStoreIndex.from_documents(
        sample_docs
    )
    
    vector_retriever = vector_index.as_retriever(similarity_top_k=5)
    
    # Create a keyword table index and retriever
    keyword_index = SimpleKeywordTableIndex.from_documents(
        sample_docs
    )
    keyword_retriever = keyword_index.as_retriever(similarity_top_k=5)
    
    keyword_parser = SimpleNodeParser()
    
    # 1. Set up Ensemble Retriever
    ensemble_retriever = EnsembleRetriever(
        weights={"vector": 0.7, "keyword": 0.3},
        normalization_method="minmax",
        combination_method="weighted_sum",
        retrievers={"vector": vector_retriever, "keyword": keyword_retriever}
    )
    
    # 2. Set up Diversity Reranker
    diversity_config = DiversityRerankConfig(
        lambda_factor=0.5,
        method="mmr",
        mmr_diversity_weight=0.3
    )
    
    diversity_reranker = DiversityReranker(config=diversity_config, embed_model=embed_model)
    
    # 3. Set up Query Router
    query_router_config = QueryRouterConfig(
        strategy="rule_based",  # Use rule-based for demo to avoid OpenAI API calls
        include_analysis_metadata=True
    )
    
    query_router = QueryRouter(
        retrievers={
            "ensemble": ensemble_retriever,
            "vector": vector_retriever,
            "keyword": keyword_retriever
        },
        default_retriever_name="ensemble",
        config=query_router_config
    )
    
    # Set up query type mappings
    from search_module.providers.llamaindex.retrievers import QueryType
    query_router.set_query_type_mapping(QueryType.KEYWORD, "keyword")
    query_router.set_query_type_mapping(QueryType.SEMANTIC, "vector")
    query_router.set_query_type_mapping(QueryType.FACTOID, "ensemble")
    query_router.set_query_type_mapping(QueryType.COMPLEX, "ensemble")
    
    # 4. Set up Citation Tracker
    citation_config = CitationConfig(
        style=CitationStyle.ENDNOTE,
        include_page_numbers=True,
        deduplicate_citations=True
    )
    
    citation_tracker = CitationTracker(config=citation_config)
    
    # 5. Set up Contextual Formatter
    formatter_config = FormatterConfig(
        default_format=ResponseFormat.MARKDOWN,
        default_verbosity=VerbosityLevel.NORMAL,
        auto_verbosity=False  # Disable auto for demo to avoid OpenAI API calls
    )
    
    contextual_formatter = ContextualFormatter(config=formatter_config)
    
    # 6. Set up LLM for response synthesis
    llm = OpenAI(model="gpt-4o")
    
    response_synthesizer = CompactAndRefine(
        llm=llm,
        verbose=True
    )
    
    # Wrap in citation synthesizer
    citation_response_synthesizer = CitationResponseSynthesizer(
        response_synthesizer=response_synthesizer,
        citation_tracker=citation_tracker
    )
    
    return {
        "router": query_router,
        "ensemble": ensemble_retriever,
        "reranker": diversity_reranker,
        "citation_tracker": citation_tracker,
        "formatter": contextual_formatter,
        "synthesizer": citation_response_synthesizer
    }


def demo_search(components, query_text):
    """Run the advanced search pipeline with a query."""
    logger.info(f"Processing query: {query_text}")
    
    # Extract components
    router = components["router"]
    reranker = components["reranker"]
    citation_tracker = components["citation_tracker"]
    formatter = components["formatter"]
    synthesizer = components["synthesizer"]
    
    # 1. Create query bundle
    query = QueryBundle(query_str=query_text)
    
    # 2. Use router to select retriever and get nodes
    logger.info("Routing query to appropriate retriever...")
    retriever_name, retrieval_result = router.route_query(query)
    retrieved_nodes = retrieval_result.nodes
    logger.info(f"Query routed to '{retriever_name}' retriever, found {len(retrieved_nodes)} nodes")
    
    # 3. Rerank for diversity
    logger.info("Reranking results for diversity...")
    reranked_nodes = reranker.rerank(retrieved_nodes, query)
    logger.info(f"Reranked to {len(reranked_nodes)} nodes")
    
    # 4. Generate response with citations
    logger.info("Generating response with citations...")
    response = synthesizer.synthesize(query=query_text, nodes=reranked_nodes)
    
    # 5. Format the response appropriately
    logger.info("Formatting response...")
    final_response = formatter.format_response(
        response=response,
        query_bundle=query,
        output_format=None,
        verbosity=None,
        client_type="example",
        metadata={"retrieved_node_count": len(reranked_nodes)}
    )
    
    # Print the final result
    print("\n" + "="*50)
    print(f"QUERY: {query_text}")
    print("="*50)
    print(final_response)
    print("="*50)
    
    return final_response


def main():
    """Main function to run the example."""
    try:
        # Check for API key
        if not os.environ.get("OPENAI_API_KEY"):
            raise ValueError(
                "OPENAI_API_KEY environment variable not found. "
                "Please set it in your .env file."
            )
        
        logger.info("Setting up advanced search pipeline...")
        components = setup_advanced_search_pipeline()
        logger.info("Setup complete")
        
        # Define example queries
        queries = [
            "What are the main causes of climate change?",
            "Tell me about renewable energy technologies",
            "What is the Paris Agreement?",
            "What economic policies can address climate issues?"
        ]
        
        # Run the demo with the first query
        query = queries[0]
        logger.info(f"Running search with query: {query}")
        demo_search(components, query)
        
        # Option to try other queries
        print("\nExample complete. You can modify the script to try other queries such as:")
        for i, q in enumerate(queries[1:], 1):
            print(f"{i}. {q}")
            
    except Exception as e:
        logger.error(f"Error in example: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())


if __name__ == "__main__":
    main()
